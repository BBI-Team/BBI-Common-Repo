Stack
class StackProgram
{
     static final int max=1000;
	int top;
	inta[]=new int[max];
	booleanisEmpty()
	 {
	    return(top<0);
	 }
	StackProgram()
	 {
	    top=-1;
	 }
	booleanpush(int x)
	 {
	    if(top>=(max-1))
		{
		System.out.println("Stack is overflow");
			return false;
		}
		else
		{
		    a[++top]=x;
			System.out.println(x+"pushed into stack");
			return true;
		}
	 }
	intpop()
	 {
	    if(top<0)
		{
		System.out.println("Stack underflow");
			return 0;
		}
		else
		{
			int x=a[top--];
			return x;
		}
	 }
	intpeek()
	 {
		if(top<0)
		{
			System.out.println("Stack underflow");
			return 0;
		}
		else
		{
			int x=a[top];
			return x;
		}
	 }
}
class Stack
{
	public static void main(String args[])
	{
		StackProgram s=new StackProgram();
		s.push(10);
		s.push(20);
		s.push(30);
		System.out.println(s.pop()+" Popped from stack");
	}
}

Queue
class Queue
{
     private static intfront,rear,capacity;
	 private static intqueue[];
	Queue(int c)
	 {
		 front=rear=0;
		 capacity=c;
		 queue=new int[capacity];
	 }
	 static void queueEnqueue(int data)
	 {
		 if(capacity==rear)
		 {
			System.out.println("Queue is full!!!!");
			 return;
		 }
		 else
		 {
			 queue[rear]=data;
			 rear++;
		 }
		 return;
	 }
	 static void queueDequeue()
	 {
		 if(front==rear)
		 {
			System.out.println("Queue is empty!!!");
			 return;
		 }
		 else
		 {
			for(inti=0;i<rear-1;i++)
			 {
				 queue[i]=queue[i+1];
			 }
			 if(rear<capacity)
				 queue[rear]=0;
			 rear--;
		 }
		 return;
	 }
	 static void queueDisplay()
	 {
		inti;
		 if(front==rear)
		 {
			System.out.println("Queue is empty!!!");
			 return;
		 }
		 for(i=front;i<rear;i++)
		 {
			System.out.println(queue[i]);
		 }
		 return;
	 }
	 public static void main(String args[])
	 {
		 Queue q=new Queue(4);
		System.out.println("After inserting 4 elements in the queue");
		q.queueEnqueue(10);
		q.queueEnqueue(20);
		q.queueEnqueue(30);
		q.queueEnqueue(40);
		q.queueDisplay();
		System.out.println("Try to insert 5th element in the queue");
		q.queueEnqueue(50);
		System.out.println("Try to display queue after deleting all elements.....");
		q.queueDequeue();
		q.queueDequeue();
		q.queueDequeue();
		q.queueDequeue();
		q.queueDisplay();
	 }
}
